/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running minimal tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:
        nextflow run ghcguzman/nf_tfbscov -profile mac,docker --bigwigs /path/to/bigwigs/*.bw

----------------------------------------------------------------------------------------
*/

params {
    config_profile_name        = 'Macbook profile'
    config_profile_description = 'Profile for running the pipeline on a Macbook'

    // Limit resources so that this can run on GitHub Actions
    max_cpus   = 4
    max_memory = '10.GB'
    max_time   = '240.h'
}

process {

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 240.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 240.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory = { check_max( 10.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 240.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 1    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 240.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 240.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
}