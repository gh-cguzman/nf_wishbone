// Global default params, used in configs

params {
    // Input options
    input                      = null
    bams                       = null
    regions                    = "$projectDir/assets/hg19/1M_gc.curated.v1.bed"
    blacklist                  = "$projectDir/assets/hg19/problematic_regions.curated.v1.bed"
    genome_2bit                = null

    // Input logic
    gc_correction              = false
    em_correction              = false

    // GCparagon options
    rgb                        = 'hg19'

    // skipping options
    skip_fems                 = false
    skip_coverage             = false

    // misc options
    outdir                     = 'wishbone_results'
    publish_dir_mode           = 'copy'
    enable_conda               = false
    version                    = 'v2'
    monochrome_logs            = false

    // resource options
    max_memory     = '128.GB'
    max_cpus       = 16
    max_time       = '240.h'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

profiles {
    conda {
        params.enable_conda    = true
        docker.enabled         = false
    }
    mamba {
        params.enable_conda    = true
        conda.useMamba         = true
        docker.enabled         = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
    }
    macbook       { includeConfig 'conf/mac.config'       }
    server88      { includeConfig 'conf/server88.config'  }
    robin14       { includeConfig 'conf/robin14.config'   }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}